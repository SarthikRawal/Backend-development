1. package.json

> A file at the root of a Node.js project that acts as a manifest.
Contains essential information about your project, including:
. Name
. Version
. Author
. License
. Dependencies (more on that below)
. Scripts (commands to run specific tasks in your project)
. Created and managed using the npm init command.

2. package-lock.json:

. A file generated by npm to lock down the exact versions of dependencies used in your project.
. Ensures everyone working on the project uses the same versions, preventing unexpected errors due to dependency version changes.
. Don't add this file to your version control system (like Git) by default. Instead, use npm ci for reliable dependency installation across environments.

3. node_modules:

. A folder automatically created by npm when you run npm install.
. Contains all the third-party code (dependencies) your project relies on.
. Don't add this folder to version control either, as it can become quite large.

4. Dependencies:

. Third-party libraries or packages your project needs to function properly in a production environment (when deployed).
. Listed in the dependencies section of your package.json file.
. Installed by running npm install in your project directory.

5. Dev Dependencies:

. Third-party libraries or packages needed for development tasks like testing, building, or linting, but not required for the project to run in production.
. Listed in the devDependencies section of your package.json file.
. Installed by running npm install or, to exclude them from production builds, npm install --save-dev.

6. Nodemon:

. A utility for Node.js development that automatically restarts your Node.js application when you make changes to your code.
. Saves you the hassle of manually restarting the application after every code edit.

7. Babel:

. A JavaScript compiler that can transpile modern JavaScript code (written using features not yet supported by all browsers) into code that can run in older browsers.
. Useful for ensuring your code works across a wider range of browsers.

8. dotenv:

. A library that allows you to load environment variables from a .env file.
. Useful for storing sensitive information (like API keys or database credentials) outside of your code, . improving security.
. Requires installing the dotenv package and calling dotenv.config() in your code to load the environment variables.

9. gitignore:

. A file in your version control system (like Git) that specifies which files and folders should be ignored when committing changes to the repository.
. Helps keep your repository clean and organized by excluding unnecessary files like node_modules or temporary build artifacts.

10. Frameworks vs libraries:

Frameworks: Provide a more comprehensive structure for building web applications, often dictating the overall application architecture and offering a wide range of built-in features. (Examples: Express.js, React, Angular)

Libraries: Offer specific functionality that you can integrate into your existing codebase without enforcing a particular structure. (Examples: Lodash for utility functions, Moment.js for date manipulation)

11. Middleware
. A middleware is a function which executes on each request and response.
. We can also say that middleware have access to the req and res and it works as a middle man  

. It acts like a series of stopovers that requests and responses make before reaching their final destination

>Function as Middleware:
At its core, middleware is a function that has access to three essential arguments:

. req: The incoming HTTP request object containing information like the URL, headers, and body.
. res: The outgoing HTTP response object used to send responses back to the client.
. next: A function that represents the next middleware in the chain or the final route handler.

-> app.use(<middleware function>)


12. REST API: (or RESTful API) stands for REpresentational State Transfer Application Programming Interface. It's a set of architectural principles and constraints that guide how web services communicate with each other. 

> Here's a breakdown of the key aspects of REST APIs:

. Client-Server Model: REST APIs follow a client-server model. The client (like a mobile app, web application, or another web service) sends requests to the server (which hosts the REST API) and receives responses.
. Resources: REST APIs deal with resources, which represent data or functionality exposed by the server. Examples of resources could be user information, products in an online store, or blog posts.
. Representations: Resources are identified by URIs (Uniform Resource Identifiers) and accessed through representations. These representations are typically in formats like JSON (JavaScript Object Notation) or XML (Extensible Markup Language) that both clients and servers can understand.
. Standard Methods: REST APIs use standard HTTP methods (GET, POST, PUT, DELETE) for interacting with resources:
    GET: Retrieve a resource representation.
    POST: Create a new resource.
    PUT: Update an existing resource.
    DELETE: Delete a resource.

13. Joi 
(pronounced "joy") is a popular JavaScript library for data validation. It's not part of the core JavaScript language itself, but rather an external module that you can install using npm or yarn.

Here's a breakdown of what Joi offers:

. Schema Definition: Joi allows you to define schemas that describe the expected structure and format of your data. These schemas use a simple and intuitive language that makes them easy to read and write.
. Validation: Joi can validate data against your defined schemas. This helps ensure that the data you receive from users, APIs, or other sources conforms to your expectations.
. Error Handling: During validation, Joi provides informative error messages that pinpoint exactly where and how the data fails to meet the schema requirements.
. Flexibility: Joi supports a wide range of data types, including strings, numbers, arrays, objects, and more. It also offers various validation functions like required(), min(), max(), email(), patterns() and many others to enforce specific rules on your data.

