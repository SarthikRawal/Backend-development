> CORS (Cross-Origin Resource Sharing)
CORS is a security feature implemented by web browsers to control how resources on a web server can be requested from another domain. It is often used to allow or restrict web applications to make HTTP requests to servers hosted on a different domain.

Purpose:
- To prevent malicious websites from making unauthorized requests to your server.
- To allow controlled access to resources on your server from different domains.

How It Works:
- When a web page makes a request to a different domain (cross-origin request), the browser sends an HTTP request with an Origin header.
- The server can respond with specific header to indicate whether the request from the origin is allowed.

Common Use in Express.js:
- In an Express.js application, the cors middleware can be used to configure CORS settings.

Example:

const express = require('express');
const cors = require('cors');

const app = express();

app.use(cors({
  origin: 'https://example.com', // allow requests from this domain
  methods: ['GET', 'POST'], // allow these methods
  allowedHeaders: ['Content-Type', 'Authorization'] // allow these headers
}));

app.get('/data', (req, res) => {
  res.json({ message: 'This is CORS-enabled for a single origin.' });
});

-------------------------------------------------------------------------------

>Helmet
Helmet is a middleware for Express.js that helps secure your app by setting various HTTP headers. It is designed to protect your application from some well-known web vulnerabilities by configuring HTTP headers appropriately.

Purpose:
- To enhance the security of your Express.js applications by mitigating common web vulnerabilities.

-> const helmet = require('helmet');
-> app.use(helmet());

-------------------------------------------------------------------------------

> Routes
In the context of web development, particularly with Express.js, routes define how an application responds to client requests for a specific endpoint. These endpoints usually consist of a path and an HTTP method (GET, POST, PUT, DELETE, etc.).

Purpose:
- To map specific URL patterns to specific handler functions, which determine what should be done when a particular endpoint is requested.

How It Works:
- When an HTTP request is made to a specific path, the router matches the request to a route and executes the corresponding handler function.
- Routes can be defined directly on the app object or on an express.Router instance, which can then be mounted on the app.

-------------------------------------------------------------------------------

>Morgan
Morgan is a middleware for Express.js that logs HTTP requests. It is commonly used to log details of incoming requests, such as the HTTP method, URL, status code, response time, and more. Morgan is especially useful for monitoring and debugging web applications.

Key Features:
Predefined Formats: Built-in logging formats (e.g., 'combined', 'common', 'dev', 'tiny').
Custom Formats: Ability to create custom logging formats.
Integration: Easy integration with Express.js applications.
