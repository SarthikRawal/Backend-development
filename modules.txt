> CORS (Cross-Origin Resource Sharing)
CORS is a security feature implemented by web browsers to control how resources on a web server can be requested from another domain. It is often used to allow or restrict web applications to make HTTP requests to servers hosted on a different domain.

Purpose:
- To prevent malicious websites from making unauthorized requests to your server.
- To allow controlled access to resources on your server from different domains.

How It Works:
- When a web page makes a request to a different domain (cross-origin request), the browser sends an HTTP request with an Origin header.
- The server can respond with specific header to indicate whether the request from the origin is allowed.

Common Use in Express.js:
- In an Express.js application, the cors middleware can be used to configure CORS settings.

Example:

const express = require('express');
const cors = require('cors');

const app = express();

app.use(cors({
  origin: 'https://example.com', // allow requests from this domain
  methods: ['GET', 'POST'], // allow these methods
  allowedHeaders: ['Content-Type', 'Authorization'] // allow these headers
}));

app.get('/data', (req, res) => {
  res.json({ message: 'This is CORS-enabled for a single origin.' });
});

